import { SecretManagerServiceClient } from '@google-cloud/secret-manager';import dotenv from 'dotenv';// Load environment variables for local developmentdotenv.config();// Google Secret Manager client (only initialized in production)let secretClient: SecretManagerServiceClient | null = null;// Initialize Secret Manager client only in production environmentconst initializeSecretManager = () => {  if (process.env.NODE_ENV === 'production' && !secretClient) {    try {      secretClient = new SecretManagerServiceClient();      console.log('✅ Google Secret Manager initialized');    } catch (error) {      console.warn('⚠️ Failed to initialize Secret Manager:', error);    }  }};/** * Retrieves a secret from Google Secret Manager * Only works in production environment with proper GCP credentials */async function getSecretFromManager(secretName: string): Promise<string | null> {  if (!secretClient || process.env.NODE_ENV !== 'production') {    return null;  }  try {    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;    if (!projectId) {      console.warn('⚠️ GOOGLE_CLOUD_PROJECT_ID not set');      return null;    }    const [version] = await secretClient.accessSecretVersion({      name: `projects/${projectId}/secrets/${secretName}/versions/latest`,    });    const payload = version.payload?.data?.toString();    return payload || null;  } catch (error) {    console.warn(`⚠️ Failed to retrieve secret ${secretName}:`, error);    return null;  }}/** * Universal secret getter that works in both local and production environments *  * @param secretName - Name of the secret (for both env var and Secret Manager) * @param envVarName - Optional custom environment variable name (defaults to secretName) * @returns Promise<string | null> */export async function getSecret(secretName: string, envVarName?: string): Promise<string | null> {  const envVar = envVarName || secretName;  // Try environment variable first (works in all environments)  const envValue = process.env[envVar];  if (envValue) {    return envValue;  }  // In production, try Google Secret Manager  if (process.env.NODE_ENV === 'production') {    initializeSecretManager();    return await getSecretFromManager(secretName);  }  console.warn(`⚠️ Secret ${secretName} not found in environment variables`);  return null;}/** * Pre-configured secret getters for common secrets */export const Secrets = {  // JWT secrets  async getJwtSecret(): Promise<string> {    const secret = await getSecret('JWT_SECRET');    return secret || 'fallback-jwt-secret-for-development';  },  // Session secrets  async getSessionSecret(): Promise<string> {    const secret = await getSecret('SESSION_SECRET');    return secret || 'fallback-session-secret-for-development';  },  // Payment secrets  async getTapSecretKey(): Promise<string> {    const secret = await getSecret('TAP_SECRET_KEY');    return secret || '';  },  // Admin tokens  async getAdminToken(): Promise<string> {    const secret = await getSecret('ADMIN_TOKEN');    return secret || 'admin123';  },  // Database URL  async getDatabaseUrl(): Promise<string | null> {    return await getSecret('DATABASE_URL');  },  // Google Cloud credentials path (for local development)  async getGoogleCredentialsPath(): Promise<string | null> {    return await getSecret('GOOGLE_APPLICATION_CREDENTIALS');  }};/** * Validates that required secrets are available */export async function validateSecrets(): Promise<boolean> {  const requiredSecrets = [    { name: 'JWT_SECRET', getter: Secrets.getJwtSecret },    { name: 'SESSION_SECRET', getter: Secrets.getSessionSecret },  ];  let allValid = true;  for (const { name, getter } of requiredSecrets) {    const value = await getter();    if (!value) {      console.error(`❌ Required secret ${name} is missing`);      allValid = false;    } else {      console.log(`✅ Secret ${name} is available`);    }  }  return allValid;}/** * Environment detection utilities */export const Environment = {  isDevelopment: () => process.env.NODE_ENV === 'development',  isProduction: () => process.env.NODE_ENV === 'production',  isCloudRun: () => !!process.env.K_SERVICE,  hasGoogleCredentials: () => !!process.env.GOOGLE_APPLICATION_CREDENTIALS || process.env.NODE_ENV === 'production'};export default Secrets;